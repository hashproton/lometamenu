@page "/"
@using Application.Repositories.Common
@using Application.UseCases.Tenants.Commands
@using Application.UseCases.Tenants.Queries
@using MediatR
@inject ISender Mediator
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Tenants</h1>

<EditForm Model="Model" Enhance FormName="CreateTenant" OnValidSubmit="HandleValidSubmit">
    <InputText id="name" @bind-Value="Model.Name"/>
    <button type="submit">Create</button>
</EditForm>

@if (_response == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var tenant in _response.Items)
        {
            <tr>
                <td>@tenant.Id</td>
                <td>@tenant.Name</td>
                <td>
                    <button @onclick="() => HandleDelete(tenant.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <p>@_response.PageNumber of @_response.TotalPages</p>
    <p>Show @_response.Items.Count() of a total @_response.TotalItems</p>

    @if (_response.HasPreviousPage)
    {
        <button @onclick="() => HandlePageChange(PageAction.Previous)">Previous</button>
    }

    @if (_response.HasNextPage)
    {
        <button @onclick="() => HandlePageChange(PageAction.Next)">Next</button>
    }
}

@code {
    enum PageAction
    {
        Previous,
        Next
    }

    [SupplyParameterFromForm] public CreateTenantCommand Model { get; set; } = new(default!);

    [SupplyParameterFromQuery] private int Page { get; set; }

    private PaginatedResult<GetAllTenantsQueryResponse>? _response;

    protected override Task OnParametersSetAsync() => LoadData();

    private async Task LoadData()
    {
        if (Page <= 0)
        {
            Page = 1;
        }

        _response = await Mediator.Send(new GetAllTenantsQuery(new PaginatedQuery(
            Page, 3)));
    }
    
    private async Task HandlePageChange(PageAction pageAction)
    {
        if (pageAction == PageAction.Previous)
        {
            Page -= 1;
        }
        else if (pageAction == PageAction.Next)
        {
            Page += 1;
        }

        await LoadData();
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("page", Page.ToString()));
    }
    
    private async Task HandleDelete(Guid tenantId)
    {
        await Mediator.Send(new DeleteTenantCommand(tenantId));
        await LoadData();
    }

    private async Task HandleValidSubmit()
    {
        await Mediator.Send(Model);
        await LoadData();
    }
}